* nix-darwin

Nix-darwin setup for an M3 mac, a variant of nix for macs.

** first time setup

- Install [[https://nixos.org/download.html#nix-install-macos][Nix, multi-user installation]].
- Install [[https://brew.sh/][Homebrew]]. Not strictly necessary, but some apps are not in [[https://search.nixos.org/packages][nixpkgs]], and nix integrates nicely with homebrew.
- Clone this repository to =~/.config/nix-darwin=
- [[https://github.com/LnL7/nix-darwin/blob/master/README.md#step-2-installing-nix-darwin][Install nix-darwin]], using nix itself, and nix flakes

#+begin_src sh
nix --extra-experimental-features 'nix-command flakes' \
  run nix-darwin -- switch --flake ~/.config/nix-darwin
#+end_src

** build the system and switch to it

#+begin_src sh
darwin-rebuild switch --flake ~/.config/nix-darwin
#+end_src

(needs root)

** repo contents

- [[./flake.nix][flake.nix]]
  - main entrypoint
  - systems configuration: only one for a single mac
  - dependency setup: inputs with locked versions
  - configured with China mirrors for faster downloads
- [[./flake.lock][flake.lock]]
  - pinned versions of all dependencies
- [[./modules/][modules/]]
  - [[./modules/apps.nix][apps.nix]]: system and homebrew packages, environment variables
  - [[./modules/host-users.nix][host-users.nix]]: machine and user setup
  - [[./modules/nix-core.nix][nix-core.nix]]: configuration of nix itself on the machine
  - [[./modules/system.nix][system.nix]]: mac specific settings; dock, keyboard, finder++
- [[./home/][home/]]
  - [[https://nixos.wiki/wiki/Home_Manager][home manager modules]]: user specific package configuration
  - most of these modules are pulled in from [[https://github.com/jiaqiwang969/nix-home-manager][jiaqiwang969/nix-home-manager]]
  - includes configurations for:
    - GPG and SSH keys
    - Git configuration
    - Terminal tools (alacritty, tmux)
    - Development tools (emacs, neovim)
    - Window management (yabai, skhd)

** key features

- Multiple package channels:
  - nixpkgs-darwin (23.11 stable)
  - nixpkgs-unstable (latest unstable)
  - nixpkgs-locked (specific version for compatibility)
- China mirrors configuration for faster downloads
- Integrated development environment setup
- Automated system maintenance
- Custom overlays and patches

** input flakes (dependencies)

All dependencies are locked to specific versions for reproducibility:

- [[https://github.com/nixos/nixpkgs/tree/nixpkgs-23.11-darwin][nixpkgs-darwin]] (2024-01-31): nixpkgs for macOS
- [[https://github.com/LnL7/nix-darwin/][nix-darwin]] (2024-03-01): nix support for configuring macs
- [[https://github.com/nix-community/home-manager/tree/release-23.11][home-manager]] (2024-01-30): user specific package configuration
- [[https://github.com/bandithedoge/nixpkgs-firefox-darwin/][nixpkgs-firefox-darwin]] (2024-01-21): firefox built for darwin
- Custom configurations:
  - [[https://github.com/jiaqiwang969/nix-home-manager][nix-home-manager]] (2024-01-23): personal home-manager config
  - [[https://github.com/jiaqiwang969/dotfiles][dotfiles]] (2024-01-30): personal dotfiles

** updating

Update all dependencies:
#+begin_src sh
nix flake update
#+end_src

Update a single input:
#+begin_src sh
nix flake lock --update-input <input-name>
# Example:
nix flake lock --update-input nixpkgs-firefox-darwin
#+end_src

After updating, rebuild the system:
#+begin_src sh
darwin-rebuild switch
#+end_src

** maintenance

Clean up old generations:
#+begin_src sh
nix-collect-garbage -d
#+end_src

Optimize store:
#+begin_src sh
nix store optimise
#+end_src

** troubleshooting

If you encounter issues with applications:
1. Check the nix logs: =journalctl -u nix-daemon=
2. Clean up and rebuild: 
   #+begin_src sh
   nix-collect-garbage -d
   darwin-rebuild switch
   #+end_src
3. Update flake lock file if needed:
   #+begin_src sh
   nix flake update
   #+end_src
